---
title: "Lab 04"
author: Wong Chun Owen
format:
  html:
    toc: true
---

# Collaborators
![](collaborators.png)

# Task 1: Establishing a Productive Software Environment for the Project
```{r}
#| label: setup
#| include: false

library(knitr)
library(kableExtra)
library(DBI)
con_nycflights13 <- DBI::dbConnect(odbc::odbc(), dsn = "nycflights13")
```

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: false

-- Drop the table if it exists
DROP TABLE IF EXISTS airlines CASCADE;

-- Create the airlines table with appropriate columns
CREATE TABLE airlines (
    carrier CHAR(2),
    name VARCHAR(255),
    PRIMARY KEY (carrier)
);

-- Import data from the CSV file
COPY airlines
FROM 'C:/Users/itsss/Desktop/Lab04/nycflights13/nycflights13/airlines.csv'
CSV HEADER;

-- Drop the table if it exists
DROP TABLE IF EXISTS airports CASCADE;

-- Create the airports table with appropriate columns
CREATE TABLE airports (
    faa CHAR(3),
    name VARCHAR(255),
    lat NUMERIC,
    lon NUMERIC,
    alt INT,
    tz INT,
    dst CHAR(1),
    tzone VARCHAR(255),
    PRIMARY KEY (faa)
);

-- Import data from the CSV file
COPY airports(faa, name, lat, lon, alt, tz, dst, tzone)
FROM 'C:/Users/itsss/Desktop/Lab04/nycflights13/nycflights13/airports.csv'
CSV HEADER;

-- Drop the table if it exists
DROP TABLE IF EXISTS flights CASCADE;

-- Create the flights table with appropriate columns
CREATE TABLE flights (
    year INT,
    month INT,
    day INT,
    dep_time INT,
    sched_dep_time INT,
    dep_delay INT,
    arr_time INT,
    sched_arr_time INT,
    arr_delay INT,
    carrier CHAR(2),
    flight INT,
    tailnum VARCHAR(6),
    origin CHAR(3),
    dest CHAR(3),
    air_time INT,
    distance INT,
    hour INT,
    minute INT,
    time_hour TIMESTAMP,
    PRIMARY KEY (carrier, flight, time_hour)
);

-- Import data from the CSV file
COPY flights(year, month, day, dep_time, sched_dep_time, dep_delay, arr_time, sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest, air_time, distance, hour, minute, time_hour)
FROM 'C:/Users/itsss/Desktop/Lab04/nycflights13/nycflights13/flights.csv'
CSV HEADER;


-- Drop the table if it exists
DROP TABLE IF EXISTS planes CASCADE;
```
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

-- Create the planes table with appropriate columns
CREATE TABLE planes (
    tailnum VARCHAR(255) PRIMARY KEY,
    year INT,
    type VARCHAR(255),
    manufacturer VARCHAR(255),
    model VARCHAR(255),
    engines INT,
    seats INT,
    speed INT,
    engine VARCHAR(255)
);

-- Import data from the CSV file
COPY planes(tailnum, year, type, manufacturer, model, engines, seats, speed, engine)
FROM 'C:/Users/itsss/Desktop/Lab04/nycflights13/nycflights13/planes.csv'
CSV HEADER;
```
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: false

-- Drop the table if it exists
DROP TABLE IF EXISTS weather CASCADE;

-- Create the weather table with appropriate columns
CREATE TABLE weather (
    origin CHAR(3),
    year INT,
    month INT,
    day INT,
    hour INT,
    temp NUMERIC,
    dewp NUMERIC,
    humid NUMERIC,
    wind_dir INT,
    wind_speed NUMERIC,
    wind_gust NUMERIC,
    precip NUMERIC,
    pressure NUMERIC,
    visib NUMERIC,
    time_hour TIMESTAMP,
    PRIMARY KEY (origin, time_hour)
);

-- Import data from the CSV file
COPY weather(origin, year, month, day, hour, temp, dewp, humid, wind_dir, wind_speed, wind_gust, precip, pressure, visib, time_hour)
FROM 'C:/Users/itsss/Desktop/Lab04/nycflights13/nycflights13/weather.csv'
CSV HEADER;

ALTER TABLE flights
ADD FOREIGN KEY (carrier) REFERENCES airlines (carrier),
ADD FOREIGN KEY (origin) REFERENCES airports (faa),
ADD FOREIGN KEY (dest) REFERENCES airports (faa),
ADD FOREIGN KEY (tailnum) REFERENCES planes (tailnum);
ALTER TABLE weather
ADD FOREIGN KEY (origin) REFERENCES airports (faa);
```

# Task 2: Aggregating Information from the `flights` Table

1. What are the rankings of New York City’s main airports in terms of the total number of destinations served? Include columns for the following attributes:

Three-letter airport code
Airport name
Number of destinations
Rank
Sort the results first by rank and, then, alphabetically by the three-letter airport code. Hint: use INNER JOIN to get airport names from airports table.

```{sql}
#| connection: con_nycflights13
SELECT
    origin AS airport_code,
    a.name AS airport_name,
    COUNT(DISTINCT dest) AS num_destinations,
    RANK() OVER (ORDER BY COUNT(DISTINCT dest) DESC, origin ASC) AS rank
FROM flights
INNER JOIN airports a ON flights.origin = a.faa
GROUP BY origin, a.name
ORDER BY rank, airport_code;
```

2. Which ten destination airports are served by the greatest number of seats from New York City? If airports are tied for the tenth place, ensure that all tied airports are included in the output. Include columns for the following attributes:

Three-letter airport code
Airport name
Number of seats
Rank

```{sql}
#| connection: con_nycflights13
-- Step 1: Aggregate total number of seats for each destination airport
SELECT
    f.dest AS airport_code,
    a.name AS airport_name,
    SUM(p.seats) AS num_seats,
    RANK() OVER (ORDER BY SUM(p.seats) DESC, f.dest ASC) AS rank
FROM flights f
INNER JOIN aircraft p ON f.tailnum = p.tailnum
INNER JOIN airports a ON f.dest = a.faa
GROUP BY f.dest, a.name
ORDER BY rank, airport_code
LIMIT 10;
```


3. From the JFK airport, which ten destination airports are most frequently served by flights? If airports are tied for the tenth place, ensure that all tied airports are included in the output. Include columns for the following attributes:

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

WITH FlightCounts AS (
    SELECT
        f.dest AS dest_airport,
        a.name AS dest_airport_name,
        COUNT(*) AS num_flights
    FROM
        flights f
    JOIN
        airports a ON f.dest = a.faa
    WHERE
        f.origin = 'JFK'
    GROUP BY
        f.dest, a.name
),
RankedFlights AS (
    SELECT
        dest_airport,
        dest_airport_name,
        num_flights,
        RANK() OVER (ORDER BY num_flights DESC) AS rank
    FROM
        FlightCounts
)
SELECT
    dest_airport,
    dest_airport_name,
    num_flights,
    rank
FROM
    RankedFlights
WHERE
    rank <= 10;

```

4. Among the flights that experienced a departure delay of at least 30 minutes, what percentage still managed to arrive on time? Provide the answer in a table with one row and one column. Round the percentage to two decimal places.
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT ROUND(
    (SELECT COUNT(*) 
     FROM flights 
     WHERE dep_delay >= 30 AND arr_delay <= 0) * 100.0 / 
    (SELECT COUNT(*) 
     FROM flights 
     WHERE dep_delay >= 30),
2) AS on_time_percentage;

```
5. Which ten planes, among those with at least ten flights departing from New York City, exhibited the highest observed mean speed? The speed calculation should consider the distance between airports and the time spent in the air, with each flight equally weighted in the average.
```{sql}  
#| connection: con_nycflights13  
#| eval: true
#| echo: true

WITH FlightSpeeds AS (
    SELECT
        f.tailnum,
        AVG(f.distance / NULLIF(f.air_time, 0)) AS mean_speed
    FROM
        flights f
    WHERE
        f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY
        f.tailnum
    HAVING
        COUNT(*) >= 10
),
RankedSpeeds AS (
    SELECT
        fs.tailnum,
        p.manufacturer,
        p.model,
        fs.mean_speed,
        RANK() OVER (ORDER BY fs.mean_speed DESC) AS rank
    FROM
        FlightSpeeds fs
    JOIN
        planes p ON fs.tailnum = p.tailnum
)
SELECT
    rs.tailnum,
    rs.manufacturer,
    rs.model,
    ROUND(rs.mean_speed, 2) AS mean_speed,
    rs.rank
FROM
    RankedSpeeds rs
WHERE
    rs.rank <= 10
ORDER BY
    rs.rank,
    rs.tailnum;

```


# Task 3: Exploring Flights from New York City to Chicago
1. Which airport names in the `airports` table contain the string '`Chicago`'? Create a view named `chicago_airports` to save the result, including only the `faa` and `name` columns.

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true
DROP VIEW IF EXISTS chicago_airports;
CREATE VIEW chicago_airports AS
SELECT faa, name
FROM airports
WHERE name LIKE '%Chicago%';
```

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT *
FROM chicago_airports;
```

2. How many flights departed from New York City to each of Chicago’s airports? Include columns for the following attributes:

- Three-letter code of the destination airport
- Name of the destination airport
- Number of flights
- Rank

Sort the results first by rank and, then, alphabetically by the three-letter code of the destination airport.

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT dest, name, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM flights
INNER JOIN chicago_airports
ON flights.dest = chicago_airports.faa
WHERE flights.origin IN ('JFK', 'LGA', 'EWR')
GROUP BY dest, name
ORDER BY rank, dest;
```

3. Which airlines operated flights from New York City to Chicago? Include columns for the following attributes:

- Two-letter airline code
- Airline name
- Number of flights
- Rank

Sort the results first by rank and, then, alphabetically by the two-letter airline code.

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT airlines.carrier, airlines.name, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM airlines
INNER JOIN flights ON airlines.carrier = flights.carrier
INNER JOIN chicago_airports ON flights.dest = chicago_airports.faa
WHERE flights.origin IN ('JFK', 'LGA', 'EWR')
GROUP BY airlines.carrier, airlines.name
ORDER BY rank, airlines.carrier;
```

4. What were the ten most frequent combinations of manufacturer and model used for flights from New York City to Chicago? If manufacturer-model combinations are tied for the tenth place, incorporate all of them in the output. Include columns for each of the following attributes:

- Manufacturer
- Model
- Number of flights
- Rank

Sort by rank, then alphabetically by manufacturer, and, lastly, by model.
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT manufacturer, model, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM planes
INNER JOIN flights ON planes.tailnum = flights.tailnum
INNER JOIN chicago_airports ON flights.dest = chicago_airports.faa
WHERE flights.origin IN ('JFK', 'LGA', 'EWR')
GROUP BY manufacturer, model
ORDER BY rank, manufacturer, model
LIMIT 10;
```

5. For each combination of origin airport in New York City and destination airport in Chicago, what was the total number of available seats during 2013? Include columns for the following attributes:

- Three-letter code of the origin airport
- Name of the origin airport
- Three-letter code of the destination airport
- Name of the destination airport
- Number of seats
- Rank

Sort the results first by the number of seats, then alphabetically by the three-letter code of the origin airport, and, lastly, by the three-letter code of the destination airport. **Hint: use `INNER JOIN` combined with `AS` wisely.**

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT 
    origin, 
    a1.name AS origin_name, 
    dest, 
    a2.name AS dest_name, 
    SUM(seats) AS num_seats, 
    RANK() OVER (ORDER BY SUM(seats) DESC) AS rank
FROM flights
INNER JOIN airports AS a1 ON flights.origin = a1.faa
INNER JOIN airports AS a2 ON flights.dest = a2.faa
INNER JOIN planes ON flights.tailnum = planes.tailnum
INNER JOIN chicago_airports ON flights.dest = chicago_airports.faa
WHERE flights.year = 2013 AND flights.origin IN ('JFK', 'LGA', 'EWR')
GROUP BY origin, origin_name, dest, dest_name
ORDER BY num_seats DESC, origin, dest;

```
# Task 4: Uncovering Associations between Weather and Flight Operations
1. How many combinations of origin airport and time_hour are present in the flights table but absent from the weather table? Provide your answer in the form of a table with one row and one column.
```{sql}
#| connection: con_nycflights13
#| eval: TRUE
#| echo: FALSE

SELECT COUNT(*) AS missing_combinations
FROM (
    SELECT DISTINCT origin, time_hour
    FROM flights
) AS f
LEFT JOIN (
    SELECT DISTINCT origin, time_hour
    FROM weather
) AS w
ON f.origin = w.origin AND f.time_hour = w.time_hour
WHERE w.origin IS NULL;
```
2. What is the percentage of on-time departures from each of New York City’s main airports under dry conditions (i.e., precip = 0) and under wet conditions? Include columns for the following attributes:

Three-letter airport code
Airport name
is_dry: Boolean values indicating zero precipitation.
Percentage of on-time departures, rounded to two decimal places
First, sort the results alphabetically by the three-letter airport code and, then, by the presence of precipitation.

```{sql}
#| connection: con_nycflights13
#| eval: TRUE
#| echo: FALSE

WITH flight_weather AS (
    SELECT
        f.origin AS airport_code,
        a.name AS airport_name,
        CASE WHEN w.precip = 0 THEN TRUE ELSE FALSE END AS is_dry,
        COUNT(*) AS total_flights,
        SUM(CASE WHEN f.dep_delay <= 0 THEN 1 ELSE 0 END) AS on_time_flights
    FROM flights AS f
    JOIN weather AS w
    ON f.origin = w.origin AND f.time_hour = w.time_hour
    JOIN airports AS a
    ON f.origin = a.faa
    WHERE f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY f.origin, a.name, is_dry
)
SELECT
    airport_code,
    airport_name,
    is_dry,
    ROUND((on_time_flights::numeric / total_flights) * 100, 2) AS on_time_percentage
FROM flight_weather
ORDER BY airport_code, is_dry;
```
3. How do New York City’s main airports rank in terms of mean departure delay when the visibility was less than one mile? Include columns for the following attributes:

Three-letter airport code
Airport name
Mean departure delay in minutes, rounded to two decimal places
Rank
Sort the results first by rank (starting with the smallest delay) and, then, alphabetically by the three-letter airport code.
```{sql}
#| connection: con_nycflights13
#| eval: TRUE
#| echo: FALSE

WITH visibility_delays AS (
    SELECT
        f.origin AS airport_code,
        a.name AS airport_name,
        AVG(f.dep_delay) AS mean_dep_delay
    FROM flights AS f
    JOIN weather AS w
    ON f.origin = w.origin AND f.time_hour = w.time_hour
    JOIN airports AS a
    ON f.origin = a.faa
    WHERE w.visib < 1 AND f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY f.origin, a.name
),
ranked_delays AS (
    SELECT
        airport_code,
        airport_name,
        ROUND(mean_dep_delay, 2) AS mean_dep_delay,
        RANK() OVER (ORDER BY mean_dep_delay ASC) AS rank
    FROM visibility_delays
)
SELECT
    airport_code,
    airport_name,
    mean_dep_delay,
    rank
FROM ranked_delays
ORDER BY rank, airport_code;
```
4. What is the correlation coefficient between the mean temperature of the day and the mean departure delay on that day? Round the value to two decimal places. Provide the answer in the form of a table with one row and one column. Hint: calculate the AVG() of temperature for each day in 2013, and then the AVG() of departure delay for each day in 2013. After that, calculate the CORR() between these two sequences (of length 365 or less). Remember to INNER JOIN flights and weather.
```{sql}
#| connection: con_nycflights13
#| eval: TRUE
#| echo: FALSE

WITH daily_avg_temp AS (
    SELECT
        DATE_TRUNC('day', time_hour) AS day,
        AVG(temp) AS avg_temp
    FROM weather
    WHERE DATE_PART('year', time_hour) = 2013
    GROUP BY DATE_TRUNC('day', time_hour)
),
daily_avg_delay AS (
    SELECT
        DATE_TRUNC('day', time_hour) AS day,
        AVG(dep_delay) AS avg_dep_delay
    FROM flights
    WHERE DATE_PART('year', time_hour) = 2013
    GROUP BY DATE_TRUNC('day', time_hour)
)
SELECT
    TO_CHAR(CORR(daily_avg_temp.avg_temp, daily_avg_delay.avg_dep_delay), 'FM999999999.00') AS correlation_coefficient
FROM
    daily_avg_temp
INNER JOIN daily_avg_delay
ON daily_avg_temp.day = daily_avg_delay.day;
```
5. Burlington, Vermont, lies almost exactly to the north of New York City. Is the mean flight time to Burlington International Airport (BTV) shorter when the wind blows from the south (between 135 and 225 degrees) compared to when it blows from the north (between 0 and 45 degrees as well as between 315 and 360 degrees)? Provide your answer in the form of a table with one row each for north and south winds, and two columns, named wind_direction and mean_air_time. Hint: CASE expression.
```{sql}
#| connection: con_nycflights13
#| eval: TRUE
#| echo: FALSE

WITH wind_direction AS (
    SELECT
        CASE
            WHEN (w.wind_dir BETWEEN 135 AND 225) THEN 'South'
            WHEN (w.wind_dir BETWEEN 0 AND 45) OR (w.wind_dir BETWEEN 315 AND 360) THEN 'North'
            ELSE NULL
        END AS wind_direction,
        f.air_time
    FROM
        flights AS f
    JOIN
        weather AS w
    ON
        f.origin = w.origin AND f.time_hour = w.time_hour
    WHERE
        f.dest = 'BTV'
)
SELECT
    wind_direction,
    AVG(air_time) AS mean_air_time
FROM
    wind_direction
WHERE wind_direction IS NOT NULL
GROUP BY
    wind_direction;
```

