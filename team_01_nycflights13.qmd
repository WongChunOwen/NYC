---
title: "Lab 04"
author: Wong Chun Owen
format:
  html:
    toc: true
---

# Collaborators
![](collaborators.png)

# Task 1: Establishing a Productive Software Environment for the Project
```{r}
#| label: setup
#| include: false

library(knitr)
library(kableExtra)
library(DBI)
con_nycflights13 <- DBI::dbConnect(odbc::odbc(), dsn = "nycflights13")
```

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: false

-- Drop the table if it exists
DROP TABLE IF EXISTS airlines CASCADE;

-- Create the airlines table with appropriate columns
CREATE TABLE airlines (
    carrier CHAR(2),
    name VARCHAR(255),
    PRIMARY KEY (carrier)
);

-- Import data from the CSV file
COPY airlines
FROM 'C:/Users/phoin/Desktop/airlines.csv'
CSV HEADER;

-- Drop the table if it exists
DROP TABLE IF EXISTS airports CASCADE;

-- Create the airports table with appropriate columns
CREATE TABLE airports (
    faa CHAR(3),
    name VARCHAR(255),
    lat NUMERIC,
    lon NUMERIC,
    alt INT,
    tz INT,
    dst CHAR(1),
    tzone VARCHAR(255),
    PRIMARY KEY (faa)
);

-- Import data from the CSV file
COPY airports(faa, name, lat, lon, alt, tz, dst, tzone)
FROM 'C:/Users/phoin/Desktop/airports.csv'
CSV HEADER;

-- Drop the table if it exists
DROP TABLE IF EXISTS flights CASCADE;

-- Create the flights table with appropriate columns
CREATE TABLE flights (
    year INT,
    month INT,
    day INT,
    dep_time INT,
    sched_dep_time INT,
    dep_delay INT,
    arr_time INT,
    sched_arr_time INT,
    arr_delay INT,
    carrier CHAR(2),
    flight INT,
    tailnum VARCHAR(6),
    origin CHAR(3),
    dest CHAR(3),
    air_time INT,
    distance INT,
    hour INT,
    minute INT,
    time_hour TIMESTAMP,
    PRIMARY KEY (carrier, flight, time_hour)
);

-- Import data from the CSV file
COPY flights(year, month, day, dep_time, sched_dep_time, dep_delay, arr_time, sched_arr_time, arr_delay, carrier, flight, tailnum, origin, dest, air_time, distance, hour, minute, time_hour)
FROM 'C:/Users/phoin/Desktop/flights.csv'
CSV HEADER;


-- Drop the table if it exists
DROP TABLE IF EXISTS planes CASCADE;
```
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

-- Create the planes table with appropriate columns
CREATE TABLE planes (
    tailnum VARCHAR(255) PRIMARY KEY,
    year INT,
    type VARCHAR(255),
    manufacturer VARCHAR(255),
    model VARCHAR(255),
    engines INT,
    seats INT,
    speed INT,
    engine VARCHAR(255)
);

-- Import data from the CSV file
COPY planes(tailnum, year, type, manufacturer, model, engines, seats, speed, engine)
FROM 'C:/Users/phoin/Desktop/planes.csv'
CSV HEADER;
```
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: false

-- Drop the table if it exists
DROP TABLE IF EXISTS weather CASCADE;

-- Create the weather table with appropriate columns
CREATE TABLE weather (
    origin CHAR(3),
    year INT,
    month INT,
    day INT,
    hour INT,
    temp NUMERIC,
    dewp NUMERIC,
    humid NUMERIC,
    wind_dir INT,
    wind_speed NUMERIC,
    wind_gust NUMERIC,
    precip NUMERIC,
    pressure NUMERIC,
    visib NUMERIC,
    time_hour TIMESTAMP,
    PRIMARY KEY (origin, time_hour)
);

-- Import data from the CSV file
COPY weather(origin, year, month, day, hour, temp, dewp, humid, wind_dir, wind_speed, wind_gust, precip, pressure, visib, time_hour)
FROM 'C:/Users/phoin/Desktop/weather.csv'
CSV HEADER;

ALTER TABLE flights
ADD FOREIGN KEY (carrier) REFERENCES airlines (carrier),
ADD FOREIGN KEY (origin) REFERENCES airports (faa),
ADD FOREIGN KEY (dest) REFERENCES airports (faa),
ADD FOREIGN KEY (tailnum) REFERENCES planes (tailnum);
ALTER TABLE weather
ADD FOREIGN KEY (origin) REFERENCES airports (faa);
```

# Task 2: Aggregating Information from the `flights` Table

3. From the JFK airport, which ten destination airports are most frequently served by flights? If airports are tied for the tenth place, ensure that all tied airports are included in the output. Include columns for the following attributes:

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

WITH FlightCounts AS (
    SELECT
        f.dest AS dest_airport,
        a.name AS dest_airport_name,
        COUNT(*) AS num_flights
    FROM
        flights f
    JOIN
        airports a ON f.dest = a.faa
    WHERE
        f.origin = 'JFK'
    GROUP BY
        f.dest, a.name
),
RankedFlights AS (
    SELECT
        dest_airport,
        dest_airport_name,
        num_flights,
        RANK() OVER (ORDER BY num_flights DESC) AS rank
    FROM
        FlightCounts
)
SELECT
    dest_airport,
    dest_airport_name,
    num_flights,
    rank
FROM
    RankedFlights
WHERE
    rank <= 10;

```

4. Among the flights that experienced a departure delay of at least 30 minutes, what percentage still managed to arrive on time? Provide the answer in a table with one row and one column. Round the percentage to two decimal places.
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT ROUND(
    (SELECT COUNT(*) 
     FROM flights 
     WHERE dep_delay >= 30 AND arr_delay <= 0) * 100.0 / 
    (SELECT COUNT(*) 
     FROM flights 
     WHERE dep_delay >= 30),
2) AS on_time_percentage;

```
5. Which ten planes, among those with at least ten flights departing from New York City, exhibited the highest observed mean speed? The speed calculation should consider the distance between airports and the time spent in the air, with each flight equally weighted in the average.
```{sql}  
#| connection: con_nycflights13  
#| eval: true
#| echo: true

WITH FlightSpeeds AS (
    SELECT
        f.tailnum,
        AVG(f.distance / NULLIF(f.air_time, 0)) AS mean_speed
    FROM
        flights f
    WHERE
        f.origin IN ('JFK', 'LGA', 'EWR')
    GROUP BY
        f.tailnum
    HAVING
        COUNT(*) >= 10
),
RankedSpeeds AS (
    SELECT
        fs.tailnum,
        p.manufacturer,
        p.model,
        fs.mean_speed,
        RANK() OVER (ORDER BY fs.mean_speed DESC) AS rank
    FROM
        FlightSpeeds fs
    JOIN
        planes p ON fs.tailnum = p.tailnum
)
SELECT
    rs.tailnum,
    rs.manufacturer,
    rs.model,
    ROUND(rs.mean_speed, 2) AS mean_speed,
    rs.rank
FROM
    RankedSpeeds rs
WHERE
    rs.rank <= 10
ORDER BY
    rs.rank,
    rs.tailnum;

```


# Task 3: Exploring Flights from New York City to Chicago

1. Which airport names in the `airports` table contain the string '`Chicago`'? Create a view named `chicago_airports` to save the result, including only the `faa` and `name` columns.

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true
DROP VIEW IF EXISTS chicago_airports;
CREATE VIEW chicago_airports AS
SELECT faa, name
FROM airports
WHERE name LIKE '%Chicago%';
```

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT *
FROM chicago_airports;
```

2. How many flights departed from New York City to each of Chicagoâ€™s airports? Include columns for the following attributes:

- Three-letter code of the destination airport
- Name of the destination airport
- Number of flights
- Rank

Sort the results first by rank and, then, alphabetically by the three-letter code of the destination airport.

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT dest, name, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM flights
INNER JOIN chicago_airports
ON flights.dest = chicago_airports.faa
GROUP BY dest, name
ORDER BY rank, dest;
```

3. Which airlines operated flights from New York City to Chicago? Include columns for the following attributes:

- Two-letter airline code
- Airline name
- Number of flights
- Rank

Sort the results first by rank and, then, alphabetically by the two-letter airline code.

```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT airlines.carrier, name, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM airlines
INNER JOIN flights
ON airlines.carrier = flights.carrier
WHERE
  (SELECT COUNT(*)
   FROM chicago_airports
   WHERE flights.dest = chicago_airports.faa) > 0
GROUP BY airlines.carrier, name
ORDER BY rank, airlines.carrier;
```

4. What were the ten most frequent combinations of manufacturer and model used for flights from New York City to Chicago? If manufacturer-model combinations are tied for the tenth place, incorporate all of them in the output. Include columns for each of the following attributes:

- Manufacturer
- Model
- Number of flights
- Rank

Sort by rank, then alphabetically by manufacturer, and, lastly, by model.
```{sql}
#| connection: con_nycflights13
#| eval: true
#| echo: true

SELECT manufacturer, model, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM planes
INNER JOIN flights
ON planes.tailnum = flights.tailnum
WHERE
  (SELECT COUNT(*)
   FROM chicago_airports
   WHERE flights.dest = chicago_airports.faa) > 0
GROUP BY manufacturer, model
ORDER BY rank, manufacturer, model;
```

5. 

# Task 4: Uncovering Associations between Weather and Flight Operations

