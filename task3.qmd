---
title: "TASK3"
author: Ash
format:
  html:
    toc: true
---

```{r}
library(DBI)
con <- dbConnect(odbc::odbc(), dsn = "nycflights13")

```

1. Which airport names in the `airports` table contain the string '`Chicago`'? Create a view named `chicago_airports` to save the result, including only the `faa` and `name` columns.

```{sql}
#| connection: con
#| eval: true
#| echo: true
DROP VIEW IF EXISTS chicago_airports;
CREATE VIEW chicago_airports AS
SELECT faa, name
FROM airports
WHERE name LIKE '%Chicago%';
```

```{sql}
#| connection: con
#| eval: true
#| echo: true

SELECT *
FROM chicago_airports;
```

2. How many flights departed from New York City to each of Chicagoâ€™s airports? Include columns for the following attributes:

- Three-letter code of the destination airport
- Name of the destination airport
- Number of flights
- Rank

Sort the results first by rank and, then, alphabetically by the three-letter code of the destination airport.

```{sql}
#| connection: con
#| eval: true
#| echo: true

SELECT dest, name, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM flights
INNER JOIN chicago_airports
ON flights.dest = chicago_airports.faa
GROUP BY dest, name
ORDER BY rank, dest;
```

3. Which airlines operated flights from New York City to Chicago? Include columns for the following attributes:

- Two-letter airline code
- Airline name
- Number of flights
- Rank

Sort the results first by rank and, then, alphabetically by the two-letter airline code.

```{sql}
#| connection: con
#| eval: true
#| echo: true

SELECT airlines.carrier, airlines.name, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM airlines
INNER JOIN flights ON airlines.carrier = flights.carrier
INNER JOIN chicago_airports ON flights.dest = chicago_airports.faa
GROUP BY airlines.carrier, airlines.name
ORDER BY rank, airlines.carrier;
```

4. What were the ten most frequent combinations of manufacturer and model used for flights from New York City to Chicago? If manufacturer-model combinations are tied for the tenth place, incorporate all of them in the output. Include columns for each of the following attributes:

- Manufacturer
- Model
- Number of flights
- Rank

Sort by rank, then alphabetically by manufacturer, and, lastly, by model.
```{sql}
#| connection: con
#| eval: true
#| echo: true

SELECT manufacturer, model, COUNT(*) AS num_flights, RANK() OVER (ORDER BY COUNT(*) DESC) AS rank
FROM planes
INNER JOIN flights ON planes.tailnum = flights.tailnum
INNER JOIN chicago_airports ON flights.dest = chicago_airports.faa
GROUP BY manufacturer, model
ORDER BY rank, manufacturer, model
LIMIT 10;
```

5. For each combination of origin airport in New York City and destination airport in Chicago, what was the total number of available seats during 2013? Include columns for the following attributes:

- Three-letter code of the origin airport
- Name of the origin airport
- Three-letter code of the destination airport
- Name of the destination airport
- Number of seats
- Rank

Sort the results first by the number of seats, then alphabetically by the three-letter code of the origin airport, and, lastly, by the three-letter code of the destination airport. **Hint: use `INNER JOIN` combined with `AS` wisely.**

```{sql}
#| connection: con
#| eval: true
#| echo: true

SELECT 
    origin, 
    a1.name AS origin_name, 
    dest, 
    a2.name AS dest_name, 
    SUM(seats) AS num_seats, 
    RANK() OVER (ORDER BY SUM(seats) DESC) AS rank
FROM flights
INNER JOIN airports AS a1 ON flights.origin = a1.faa
INNER JOIN airports AS a2 ON flights.dest = a2.faa
INNER JOIN planes ON flights.tailnum = planes.tailnum
INNER JOIN chicago_airports ON flights.dest = chicago_airports.faa
WHERE flights.year = 2013
GROUP BY origin, origin_name, dest, dest_name
ORDER BY num_seats, origin, dest;

```


